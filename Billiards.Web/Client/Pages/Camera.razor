@page "/Camera"
@inherits BaseImagesPage
@using Billiards.Web.Shared
@using Billiards.Web.Client.Models
@using Billiards.Web.Client.Extensions
@inject IJSRuntime JsRuntime
@inject HttpClient Http
<InputFile accept="image/*" capture="environment" OnChange="@PictureTaken"></InputFile>
Resize: @resizeTime Recognize: @recognizeTime time: @time
<div id="canvas" style="width: 100%; height: 100%">
    <svg id="svgContainer" viewBox="@viewbox" preserveAspectRatio="xMidYMid meet"
         style="width: 100%; height: 100%">
        <g transform="@transform">
            <rect width="2000" height="1000" style="fill: green" />
            @for (int y = 250; y <= 750; y += 250)
            {
                <line x1="0" y1="@y" x2="2000" y2="@y" style="stroke: lightgreen" />
            }
            @for (int x = 250; x <= 1750; x += 250)
            {
                <line x1="@x" y1="0" x2="@x" y2="1000" style="stroke: lightgreen" />
            }

            <rect width="2000" height="1000" style="stroke: brown; stroke-width: 32; fill-opacity: 0;" />

            @{
                if (problems != null)
                {
                    foreach (Problem problem in problems)
                    {
                        foreach (Solution solution in problem.Solutions)
                        {
                            <polyline points="@solution.PointsAsString()"
                          style="fill: none; stroke: @problem.Color; stroke-width: 3; stroke-opacity: 0.5" />
                        }
                    }
                }
                if (balls != null)
                {
                    foreach (var ball in balls)
                    {
                        if (ball.TableAbsolutePoint != null)
                        {
                            <circle cx="@ball.TableAbsolutePoint.X" cy="@ball.TableAbsolutePoint.Y"
                        r="@ballRadius" fill="@ball.Color" />
                        }
                    }
                }
            }
        </g>

        Sorry, your browser does not support inline SVG.
    </svg>
    @if (Busy)
    {
        <div class="spinner"></div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.OpenFullscreen();
        await base.OnInitializedAsync();

    }

    bool Busy { get; set; } = false;
    long imageSize1 { get; set; }
    long imageSize2 { get; set; }
    long time { get; set; }
    long resizeTime { get; set; }
    long recognizeTime { get; set; }

    private async Task PictureTaken(InputFileChangeEventArgs e)
    {
        await JsRuntime.OpenFullscreen();

        if (Busy)
        {
            return;
        }
        try
        {
            DateTime now = DateTime.Now;
            Busy = true;
            imageSize1 = e.File.Size;
            IBrowserFile file;
            if (screenOrientation == ScreenOrientation.Landscape)
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoWidth, VideoHeight);
            }
            else
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoHeight, VideoWidth);
            }
            imageSize2 = file.Size;
            resizeTime = (long)(DateTime.Now - now).TotalMilliseconds;
            using var memoryStream = new MemoryStream();

            await file.OpenReadStream().CopyToAsync(memoryStream);
            byte[] bytes = memoryStream.ToArray();

            bool recognized = await RecognizeTable(Convert.ToBase64String(bytes));

            // bool recognized = await RecognizeTable(file);

            recognizeTime = (long)(DateTime.Now - now).TotalMilliseconds;

            if (recognized)
            {
                bool predicted = await MakePrediction();
            }
            time = (long)(DateTime.Now - now).TotalMilliseconds;
        }
        catch (Exception ex)
        {
            string message = ex.Message;
        }
        finally
        {
            Busy = false;
        }
    }

}