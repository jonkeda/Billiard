@page "/Camera"
@inherits BaseImagesPage
@using Billiards.Web.Client.Models
@using Billiards.Web.Client.Extensions
@using Billiards.Web.Client.Components
@inject IJSRuntime JsRuntime

<label style="background: blue; border: 1px white; color: white; margin: 5px;padding: 5px">
    <span class="oi oi-camera-slr" aria-hidden="true"></span> Take a picture of the table
    <InputFile accept="image/*" capture="environment" style="display: none" OnChange="@PictureTaken"></InputFile>
</label>

<br />
Resize: @ResizeTime Recognize: @RecognizeTime time: @Time @Busy

@if (Busy)
{
    <div class="spinner"></div>
}

<div style="width: 100%; height: 100%; position: relative">

    <TableSolutions Balls="@balls" BallRadius="@ballRadius" Problems="@problems"
                    ScreenHeightPx="@screenHeightPx" ScreenWidthPx="screenWidthPx"
                    Transform="@transform" Viewbox="@viewbox" />

</div>
<br />
<div style="position: relative; width: @screenWidthPx; height: @screenHeightPx">
    <img src="@frameUri" style="position: absolute; top: 0px; left: 0px; width: @screenWidthPx; height: @screenHeightPx; z-index: 1" />

    <div style="width: 100%; height: 100%; position: relative">
        <TableRecognized Balls="@balls" TableCorners="@tableCorners"
                         ScreenWidthPx="@screenWidthPx" ScreenHeightPx="@screenHeightPx"
                         FinderStroke="@finderStroke" FinderRadius="@finderRadius" />
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.OpenFullscreen();
        await base.OnInitializedAsync();

    }

    private string frameUri { get; set; }

    bool Busy { get; set; } = false;
    long ImageSize1 { get; set; }
    long ImageSize2 { get; set; }
    long Time { get; set; }
    long ResizeTime { get; set; }
    long RecognizeTime { get; set; }

    private async Task PictureTaken(InputFileChangeEventArgs e)
    {
        await JsRuntime.OpenFullscreen();

        if (Busy)
        {
            return;
        }
        try
        {
            DateTime now = DateTime.Now;
            Busy = true;
            ImageSize1 = e.File.Size;
            IBrowserFile file;
            if (screenOrientation == ScreenOrientation.Landscape)
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoWidth, VideoHeight);
            }
            else
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoHeight, VideoWidth);
            }
            ImageSize2 = file.Size;
            ResizeTime = (long)(DateTime.Now - now).TotalMilliseconds;
            using var memoryStream = new MemoryStream();

            await file.OpenReadStream().CopyToAsync(memoryStream);
            byte[] bytes = memoryStream.ToArray();

            string data = Convert.ToBase64String(bytes);

            frameUri = "data:image/jpeg;base64," + data;

            bool recognized = await RecognizeTable(data);

            RecognizeTime = (long)(DateTime.Now - now).TotalMilliseconds;

            if (recognized)
            {
                bool predicted = await MakePrediction();
            }
            Time = (long)(DateTime.Now - now).TotalMilliseconds;
        }
        catch (Exception ex)
        {
            string message = ex.Message;
        }
        finally
        {
            Busy = false;
        }
    }

}