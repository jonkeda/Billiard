@page "/Camera"
@inherits BaseImagesPage
@using Billiards.Web.Client.Models
@using Billiards.Web.Client.Extensions
@using Billiards.Web.Client.Components
@using Billiards.Web.Shared
@inject IJSRuntime JsRuntime

@if (Busy)
{
    <div class="spinner"></div>
}

<div style="width: 100%; height: 100%; position: relative">

    <TableSolutions Balls="@Balls" BallRadius="@BallRadius" Problems="@Problems"
                    ScreenHeightPx="@ScreenHeightPx" ScreenWidthPx="screenWidthPx"
                    Transform="@Transform" Viewbox="@Viewbox" />

</div>

<div style="width: 100%; height: 130px">
    <div style="float: left">
        <button @onclick="ClickWhite"
                style="width: 60px; height: 60px; margin: 5px; border-radius: 50%; background-color: white">
            @if (CueBall == BallColor.White)
            {
                <span class="oi oi-media-record" aria-hidden="true"></span>
            }
            else
            {
                <span class="oi" aria-hidden="true"></span>
            }
        </button>
        <button @onclick="ClickYellow"
                style="width: 60px; height: 60px; margin: 5px; border-radius: 50%;background-color: yellow">
            @if (CueBall == BallColor.Yellow)
            {
                <span class="oi oi-media-record" aria-hidden="true"></span>
            }
            else
            {
                <span class="oi" aria-hidden="true"></span>
            }
        </button>
    </div>


    <label style="float: right">
        <div style="background: white; border-radius: 50%; border: 1px double black; color: black; width: 80px; height: 80px; margin: 30px">
            <span class="oi oi-camera-slr" aria-hidden="true" style="margin: 30px"></span>
            <InputFile accept="image/*" capture="environment" style="display: none" OnChange="@PictureTaken"></InputFile>
        </div>
    </label>
</div>

<div style="margin: auto; position: relative; width: @ScreenWidthPx; height: @ScreenHeightPx">
    <img src="@frameUri" style="position: absolute; top: 0px; left: 0px; width: @ScreenWidthPx; height: @ScreenHeightPx; z-index: 1" />

    <div style="width: 100%; height: 100%; position: relative">
        <TableRecognized Balls="@Balls" TableCorners="@TableCorners"
                         ScreenWidthPx="@ScreenWidthPx" ScreenHeightPx="@ScreenHeightPx"
                         FinderStroke="@FinderStroke" FinderRadius="@FinderRadius" />
    </div>
</div>
<div>
    @foreach (LogItem log in Log)
    {
        <p>@log.Name: @log.Message</p>
    }
</div>

<div style="height: 50px">
    <a href="@frameUri" download="@imageName" style="color: white"><span class="oi oi-data-transfer-download"> Download image</span></a>
</div>


@code {
    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.OpenFullscreen();
        await base.OnInitializedAsync();

    }
    private string frameUri { get; set; }
    private string imageName { get; set; }

    private async Task PictureTaken(InputFileChangeEventArgs e)
    {
        await JsRuntime.OpenFullscreen();

        if (Busy)
        {
            return;
        }
        try
        {
            Busy = true;
            Log.Start();

            Log.Add("Image size 1", e.File.Size);
            IBrowserFile file;
            if (ScreenOrientation == ScreenOrientation.Landscape)
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoWidth, VideoHeight);
            }
            else
            {
                file = await e.File.RequestImageFileAsync(e.File.ContentType, VideoHeight, VideoWidth);
            }

            Log.Add("Resize image");

            Log.Add("Image size 2", file.Size);

            using var memoryStream = new MemoryStream();

            await file.OpenReadStream().CopyToAsync(memoryStream);
            byte[] bytes = memoryStream.ToArray();

            Log.Add("Copy bytes");

            string data = Convert.ToBase64String(bytes);

            imageName = DateTime.Now.ToString("yyyyMMddhhmmsstt") + ".jpg";
            frameUri = "data:image/jpeg;base64," + data;


            Log.Add("Convert to base64");

            await RecognizeAndPredict(data);

            Log.End();
        }
        catch (Exception ex)
        {
            Log.Add("Error", ex.Message);
        }
        finally
        {
            Busy = false;
        }
    }

}