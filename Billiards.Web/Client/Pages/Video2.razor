@page "/Video2"
@inherits BaseImagesPage
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using Billiards.Web.Client.Components
@using Billiards.Web.Client.Extensions
@using Billiards.Web.Client.Models
@using Billiards.Web.Shared

@if (Busy)
{
    <div class="spinner"></div>
}

<div style="width: 100%; height: @ScreenHeightPx">

    <div style="margin: auto; position: relative; width: @ScreenWidthPx; height: @ScreenHeightPx">

        <div style="position: absolute; top: 1px;left:20px; z-index: 3">
            @if (mediaDevices != null)
            {
                foreach (var mediaDevice in mediaDevices)
                {
                    <button @onclick="@(e => OnSelectMedia(mediaDevice.DeviceId))"
                    style="width: 60px; height: 60px; margin-bottom: 5px; border-radius: 50%;background-color: green">
                        <span class="oi oi-camera-slr" aria-hidden="true"></span>
                    </button>
                    <br />
                }
            }
        </div>

        <div style="position: absolute; bottom: 1px; left: 20px; z-index: 2">
            <button @onclick="ClickWhite"
                    style="width: 60px; height: 60px; margin-bottom: 5px; border-radius: 50%; background-color: white">
                @if (CueBall == BallColor.White)
                {
                    <span class="oi oi-media-record" aria-hidden="true"></span>
                }
            </button>
            <br />
            <button @onclick="ClickYellow"
                    style="width: 60px; height: 60px; margin-bottom: 5px; border-radius: 50%;background-color: yellow">
                @if (CueBall == BallColor.Yellow)
                {
                    <span class="oi oi-media-record" aria-hidden="true"></span>
                }
            </button>
            <br />

        </div>

        <CameraStreamer id="videoContainer"
                        Style=@CameraStyle
                        @ref="CameraStreamerReference"
                        Width="@VideoWidth"
                        Height="@VideoHeight"
                        OnRendered="OnRenderedHandler"
                        CameraID="@cameraId"
                        Autostart />

        <button style="position: absolute; bottom: 20px;right:20px; z-index: 4;background: white;border-radius: 50%; border: 1px double black; color: black; width: 80px; height: 80px "
                @onclick="PictureTaken">
            <span class="oi oi-target" aria-hidden="true"></span>
        </button>

    </div>
</div>

<div style="width: 100%; height: 100%; position: relative">

    <TableSolutions Balls="@Balls" BallRadius="@BallRadius" Problems="@Problems"
                    ScreenHeightPx="@ScreenHeightPx" ScreenWidthPx="screenWidthPx"
                    Transform="@Transform" Viewbox="@Viewbox" />
</div>

<div style="position: relative; width: @ScreenWidthPx; height: @ScreenHeightPx">
    <img src="@frameUri" style="position: absolute; top: 0px; left: 0px; width: @ScreenWidthPx; height: @ScreenHeightPx; z-index: 1" />

    <TableRecognized Balls="@Balls" TableCorners="@TableCorners"
                     ScreenWidthPx="@ScreenWidthPx" ScreenHeightPx="@ScreenHeightPx"
                     FinderStroke="@FinderStroke" FinderRadius="@FinderRadius" />
</div>
<div>
    Resize: @ResizeTime
    Recognize: @RecognizeTime
    Prediction: @PredictionTime @Busy
</div>
<div style="height: 50px">
    <a href="@frameUri" download="@imageName">Download image</a>
</div>
<div>
    @Message
</div>


@code {
    CameraStreamer CameraStreamerReference;
    string cameraId = null;
    MediaDeviceInfoModel[]? mediaDevices;
    private string Message { get; set; }
    private string frameUri { get; set; }
    private string imageName { get; set; }
    long PredictionTime { get; set; }
    long ResizeTime { get; set; }
    long RecognizeTime { get; set; }

    private async void OnRenderedHandler()
    {
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            mediaDevices = await CameraStreamerReference.GetCameraDevicesAsync();
            StateHasChanged();

            await CameraStreamerReference.ReloadAsync();
            var mediaDevice = mediaDevices.LastOrDefault();
            if (mediaDevice != null)
            {
                await OnSelectMedia(mediaDevice.DeviceId);
            }
        }
    }

    private async Task OnSelectMedia(string mediaDeviceId)
    {
        await CameraStreamerReference.ChangeCameraAsync(mediaDeviceId);
    }

    private async Task PictureTaken()
    {
        await JsRuntime.OpenFullscreen();

        if (Busy)
        {
            return;
        }
        try
        {
            DateTime now = DateTime.Now;
            Busy = true;

            frameUri = await CameraStreamerReference.GetImage(); ;
            imageName = DateTime.Now.ToString("yyyyMMddhhmmsstt") + ".jpg";
            int commaIndex = frameUri.IndexOf(",");
            string data = frameUri.Substring(commaIndex + 1);

            bool recognized = await RecognizeTable(data);

            RecognizeTime = (long)(DateTime.Now - now).TotalMilliseconds;
            now = DateTime.Now;

            if (recognized)
            {
                bool predicted = await MakePrediction();
            }
            PredictionTime = (long)(DateTime.Now - now).TotalMilliseconds;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
        finally
        {
            Busy = false;
        }
    }
}