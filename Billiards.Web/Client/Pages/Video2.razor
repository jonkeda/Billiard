@page "/Video2"
@inherits BaseImagesPage
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using Billiards.Web.Client.Components
@using Billiards.Web.Client.Extensions
@using Billiards.Web.Client.Models
@using Billiards.Web.Shared

@if (Busy)
{
    <div class="spinner"></div>
}


<div style="position: relative; width: @ScreenWidthPx; height: @ScreenHeightPx">
    
    <div style="position: absolute; top: 1px;left:20px; z-index: 3">
        @if (mediaDevices != null)
        {
            foreach (var mediaDevice in mediaDevices)
            {
                <button @onclick="@(e => OnSelectMedia(mediaDevice.DeviceId))"
                style="width: 60px; height: 60px; margin-bottom: 40px; border-radius: 50%;background-color: green">
                    <span class="oi oi-camera-slr" aria-hidden="true"></span>
                </button>
                <br/>
            }
        }
    </div>

    <div style="position: absolute; bottom: 1px;leftt: 20px; z-index: 2">
        <InputRadioGroup @bind-Value="@CueBall" >
            <label style="position: relative; width: 60px; height: 60px;  margin-bottom: 40px;background-color: white;border-radius: 50%">
                <InputRadio Value="@BallColor.White" style="position: absolute; left: 25px; top:25px" />&nbsp;
            </label>
            <br/>
            <label style="position: relative; width: 60px; height: 60px;  margin-bottom: 40px;background-color: yellow;border-radius: 50%">
                <InputRadio Value="@BallColor.Yellow" style="position: absolute; left: 25px; top:25px" />&nbsp;
            </label>
        </InputRadioGroup>
    </div>

    <CameraStreamer id="videoContainer"
                    Style=@CameraStyle
                    @ref="CameraStreamerReference"
                    Width="@VideoWidth"
                    Height="@VideoHeight"
                    OnRendered="OnRenderedHandler"
                    CameraID="@cameraId"
                    Autostart/>
    
    <button style="position: absolute; bottom: 20px;left:45%; z-index: 4;background: white;border-radius: 50%; border: 1px solid black; color: black; width: 80px; height: 80px "
            @onclick="PictureTaken">
        <span class="oi oi-target" aria-hidden="true"></span> 
    </button>

</div>

<div style="width: 100%; height: 100%; position: relative">

    <TableSolutions Balls="@Balls" BallRadius="@BallRadius" Problems="@Problems"
                    ScreenHeightPx="@ScreenHeightPx" ScreenWidthPx="screenWidthPx"
                    Transform="@Transform" Viewbox="@Viewbox" />
</div>

<div style="position: relative; width: @ScreenWidthPx; height: @ScreenHeightPx">
    <img src="@frameUri" style="position: absolute; top: 0px; left: 0px; width: @ScreenWidthPx; height: @ScreenHeightPx; z-index: 1" />

    <div style="width: 100%; height: 100%; position: relative">
        <TableRecognized Balls="@Balls" TableCorners="@TableCorners"
                         ScreenWidthPx="@ScreenWidthPx" ScreenHeightPx="@ScreenHeightPx"
                         FinderStroke="@FinderStroke" FinderRadius="@FinderRadius" />
    </div>
</div>
<div>
    @Message
</div>


@code {
    CameraStreamer CameraStreamerReference;
    string cameraId = null;
    MediaDeviceInfoModel[]? mediaDevices;
    private string Message { get; set; }
    private string frameUri { get; set; }
    long PredictionTime { get; set; }
    long ResizeTime { get; set; }
    long RecognizeTime { get; set; }

    private async void OnRenderedHandler()
    {
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            mediaDevices = await CameraStreamerReference.GetCameraDevicesAsync();
            StateHasChanged();

            await CameraStreamerReference.ReloadAsync();
            var mediaDevice = mediaDevices.LastOrDefault();
            if (mediaDevice != null)
            {
                await OnSelectMedia(mediaDevice.DeviceId);
            }
        }
    }

    private async Task OnSelectMedia(string mediaDeviceId)
    {
        await CameraStreamerReference.ChangeCameraAsync(mediaDeviceId);
    }

    private async Task PictureTaken()
    {
        await JsRuntime.OpenFullscreen();

        if (Busy)
        {
            return;
        }
        try
        {
            DateTime now = DateTime.Now;
            Busy = true;

            frameUri = await CameraStreamerReference.GetImage(); ;

            int commaIndex = frameUri.IndexOf(",");
            string data = frameUri.Substring(commaIndex + 1);

            bool recognized = await RecognizeTable(data);

            RecognizeTime = (long)(DateTime.Now - now).TotalMilliseconds;
            now = DateTime.Now;

            if (recognized)
            {
                bool predicted = await MakePrediction();
            }
            PredictionTime = (long)(DateTime.Now - now).TotalMilliseconds;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
        finally
        {
            Busy = false;
        }
    }

}