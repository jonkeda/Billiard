@page "/camera2"
@using System.IO
@using Billiards.Web.Client.Components
@using Billiards.Web.Client.Models

<h1>Streaming the world!</h1>

                
<div id="canvas" style="position: relative; width: 480px; height: 270px; background-color: antiquewhite;">
    <div style="position: absolute; top: 1px; width: 100%; height: 100%; z-index: 1">
    <CameraStreamer id="videoContainer"
                        Style="width: 480px; height: 270px;"
                        @ref="CameraStreamerReference"
                    Width="1920"
                    Height="1080"
                    OnRendered="OnRenderedHandler"
                    OnFrame="OnFrameHandler"
                    CameraID="@cameraId"
                    Autostart/>
    </div>
    <svg id="svgContainer" style="position: absolute; top: 1px; width: 100%; height: 100%; z-index: 2">
        <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"/>
        Sorry, your browser does not support inline SVG.
    </svg>
</div>


@{
    if (mediaDevices != null)
    {
        foreach (var mediaDevice in mediaDevices)
        {
            <button @onclick="@(e => OnSelectMedia(mediaDevice.DeviceId))">@mediaDevice.Label</button>
        }
    }
}

@code {
    CameraStreamer CameraStreamerReference;

    string cameraId = null;
    MediaDeviceInfoModel[]? mediaDevices;

    private async void OnRenderedHandler()
    {
        // Check camera-access or ask user, if it's not allowed currently
        if (await CameraStreamerReference.GetCameraAccessAsync())
        {
            // Reloading re-initializes the stream and starts the
            // stream automatically if the Autostart parameter is set
            await CameraStreamerReference.ReloadAsync();

            // If Autostart is not set, you have to manually start the stream again
            /* await CameraStreamerReference.StartAsync(); */


            mediaDevices = await CameraStreamerReference.GetCameraDevicesAsync();
        }
    }

    private async void OnSelectMedia(string mediaDeviceId)
    {
        await CameraStreamerReference.ChangeCameraAsync(mediaDeviceId);
    }

    private void OnFrameHandler(string data)
    {
        // Remove the suffix added by javascript
        data = data[(data.IndexOf(',') + 1)..];

        // Convert the base64 string to a System.Drawing.Bitmap
        //Bitmap bmp = new(new MemoryStream(Convert.FromBase64String(data)));

        // Do something with the bitmap
    }
}